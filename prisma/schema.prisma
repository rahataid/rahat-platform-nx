// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ++++++++++++++++++ START: @rumsan/user - User +++++++++++++++++++++++++++++++

// =================== User Module ==================
model User {
  id     Int     @id @default(autoincrement())
  uuid   String  @unique @default(uuid())
  name   String?
  gender Gender  @default(UNKNOWN)
  email  String?
  phone  String?
  wallet String?
  extras Json?   @db.JsonB()

  Auth     Auth[]
  UserRole UserRole[]
  Signup   Signup[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  @@map("tbl_users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

// =================== Role Module ==================
model Role {
  id       Int       @unique @default(autoincrement())
  name     String    @unique @db.VarChar()
  isSystem Boolean   @default(false)
  expiry   DateTime?

  Permission Permission[]
  UserRole   UserRole[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  createdBy Int?
  updatedBy Int?

  @@map("tbl_auth_roles")
}

model Permission {
  id         Int     @unique @default(autoincrement())
  roleId     Int
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  Role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_auth_permissions")
}

model UserRole {
  id     Int       @id @default(autoincrement())
  userId Int
  roleId Int
  expiry DateTime?

  User User @relation(fields: [userId], references: [id])
  Role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  createdBy Int?

  @@unique([userId, roleId], name: "userRoleIdentifier")
  @@map("tbl_users_roles")
}

// =================== Auth Module ==================
model Auth {
  id            Int       @id @default(autoincrement())
  userId        Int
  service       Service
  serviceId     String
  details       Json?     @db.JsonB()
  challenge     String?
  falseAttempts Int       @default(0)
  isLocked      Boolean   @default(false)
  lockedOnAt    DateTime?
  lastLoginAt   DateTime?

  User    User          @relation(fields: [userId], references: [id])
  AuthLog AuthSession[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@unique([service, serviceId], name: "authIdentifier")
  @@map("tbl_auth")
}

model AuthSession {
  id        Int     @id @default(autoincrement())
  clientId  String
  sessionId String  @unique @default(uuid())
  authId    Int
  ip        String?
  details   Json?   @db.JsonB()
  userAgent String?

  Auth Auth @relation(fields: [authId], references: [id])

  createdAt DateTime @default(now())

  @@map("tbl_auth_sessions")
}

enum Service {
  EMAIL
  PHONE
  WALLET
  GOOGLE
  APPLE
  FACEBOOK
  TWITTER
  GITHUB
  LINKEDIN
}

// ++++++++++++++++++ END: @rumsan/user - Role/Auth ++++++++++++++++++++++++
// ++++++++++++++++++ START: @rumsan/user - Signup +++++++++++++++++++++++++

model Signup {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid())
  userIdentifier String?
  data           Json?        @db.JsonB()
  status         SignupStatus @default(PENDING)
  rejectedReason String?
  approvedBy     Int?
  approvedAt     DateTime?

  User User? @relation(fields: [approvedBy], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_users_signups")
}

enum SignupStatus {
  PENDING
  APPROVED
  FAILED
  REJECTED
}

// ++++++++++++++++++ END: @rumsan/user - Signup +++++++++++++++++++++++++++
// ++++++++++++++++++ START: @rumsan/settings +++++++++++++++++++++++++++

model Setting {
  name           String          @id @unique
  value          Json
  dataType       SettingDataType
  requiredFields String[]
  isReadOnly     Boolean         @default(false)
  isPrivate      Boolean         @default(true)

  @@map("tbl_settings")
}

enum SettingDataType {
  STRING
  NUMBER
  BOOLEAN
  OBJECT
}

// ++++++++++++++++++ END: @rumsan/settings +++++++++++++++++++++++++++
// ++++++++++++++++++ START: @rahat/beneficiaries +++++++++++++++++++++++++++

model Beneficiary {
  id   Int    @id @default(autoincrement()) @db.Integer()
  uuid String @unique @default(uuid()) @db.Uuid()

  customId String @unique

  firstName      String
  lastName       String
  gender         Gender         @default(UNKNOWN)
  walletAddress  String?
  birthDate      DateTime?
  location       String?
  latitude       Float?
  longitude      Float?
  phone          String?
  email          String?
  extras         Json?          @db.JsonB()
  notes          String?
  bankedStatus   BankedStatus   @default(UNKNOWN)
  internetStatus InternetStatus @default(UNKNOWN)
  phoneStatus    PhoneStatus    @default(UNKNOWN)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt()
  deletedAt      DateTime?

  @@map("tbl_beneficiaries")
}

enum BankedStatus {
  UNKNOWN
  UNBANKED
  BANKED
  UNDER_BANKED
}

enum InternetStatus {
  UNKNOWN
  NO_INTERNET
  HOME_INTERNET
  MOBILE_INTERNET
}

enum PhoneStatus {
  UNKNOWN
  NO_PHONE
  FEATURE_PHONE
  SMART_PHONE
}

// ++++++++++++++++++ END: @rahat/beneficiaries +++++++++++++++++++++++++++
// ++++++++++++++++++ START: @rahat/projects - Projects +++++++++++++++++++
model Project {
  id              Int           @id @default(autoincrement())
  uuid            String        @unique @default(uuid())
  name            String
  description     String?
  status          ProjectStatus @default(NOT_READY)
  type            String
  contractAddress String?
  extras          Json?         @db.JsonB()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?

  @@map("tbl_projects")
}

enum ProjectStatus {
  NOT_READY
  ACTIVE
  CLOSED
}

// ++++++++++++++++++ END: Rahat - Projects +++++++++++++++++++++++++++++++
// ++++++++++++++++++ START: @rahat/stats - Statistics ++++++++++++++++++++

model Stats {
  name  String  @id @unique
  data  Json
  group String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_stats")
}

// ++++++++++++++++++ END: @rahat/stats - Statistics +++++++++++++++++++++++
